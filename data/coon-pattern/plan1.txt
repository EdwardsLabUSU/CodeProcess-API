Software Dev Plan
Requirements specification
    3 modes
    pattern.py - You must define the following functions inside of this module
        reset()
            Erase all of the patterns and start over
        setup()
            Configure turtle to draw quickly
            Configure turtle to have a window of 1000 x 800
        drawRectanglePattern()
            Use appropriate parameters - must include
                Center position - This is the x, y center point of the circular pattern that is drawn
                Offset - This is the distance from the center position to the starting corner of each rectangle. It can be a positive or negative number
                Height - The height of a rectangle
                Width - The width of a rectangle
                Count - The number of rectangles to draw within the 360 degree pattern.
                Rotation - The number of degrees each rectangle is rotated in relation to the line from the Center Position to the starting corner of the rectangle
                each rectangle must be a new random color (at least 4 different colors)
            It should call drawRectangle()
        drawRectangle()
            Use appropriate parameters
            Should draw a SINGLE rectangle
        drawCirclePattern()
            Use appropriate parameters - these should include
                Center position - This is the x, y center point of the circular pattern that is drawn
                Offset - This is the distance from the center position to starting drawing point of each circle.  It can be a positive or negative number. Note that the center point of each circle should be 'radius + offset' distance from the Center Position of the pattern.
                Radius - The radius of the circle
                Count - The number of circles to draw within the 360 degree pattern.
                each circle must be a new random color (at least 4 different colors)
        drawSuperPattern()
            Use appropriate parameters
            Randomly draw Rectangle and Circle patterns. Each pattern should based on random values.
            Use reasonable random values (some can be negative) so patterns are drawn on the screen
        setRandomColor()
            Do not use any parameters
            Set turtle to draw in a random color
            Use at least 4 colors
        done()
        Called when user quits
        Keeps the turtle window open
    use starter code

System Analysis
    use a pattern module with the 6 formulas described above for the rectangles and the 4 described above for the circles
    no mathematical formulas

System Design - task1.py
    add import statements - turtle and pattern and random
    add input statements for
        rectangle,
            Center position
            Offset
            Height
            Width
            Count
            Rotation
        circle,
            center position
            offset
            radius
            count
        and super patterns
            number of patterns to draw
    add statements to clear drawings/ play again
        if response == 3:
            playAgain = false
        elif response == 2:
            clear window
            call setup()

System design - pattern.py
    define reset()
        clear turtle, turtle goes to origin, heading resets
    define setup()
        speed(0), window size 1000 * 800
    define drawRectanglePattern() with parameters:
        centerPosition, offset, height, width, count, rotation
        loop [count] times - for loop
            turtle goes to center position
            call setRandomColor()
            turns left [(360/count) * [iteration]] degrees (beginning at 0)
            goes forward by [offset]
            turns right by [rotation]
            call drawRectangle(width, height)
            reset the heading to 0 degrees
    define drawRectangle() with parameters:
        height, width
        turn right (90)
        loop twice:
            go forward by [width]
            turn left (90)
            go forward by [height]
            turn left (90)
    define drawCirclePattern() with parameters:
        centerPosition
        offset
        radius
        count
        loop [count] times - for loop
            turtle goes to center position
            call setRandomColor()
            turns left [(360/count) * [iteration]] degrees (beginning at 0)
            goes forward by [offset]
            turns right (90)
            draws a circle of radius([radius])
            reset the heading to 0 degrees
    define drawSuperPattern() with parameters:
        num
        loop [num] times:
            centerX = random number between -450, 450
            centerY = randint(-350, 350)
            count = randint(1, 180)
            offset = randint(-100, 100)
            circOrRect = randint(1,2)
            if circOrRect == 1:
                radius = randint(0, 100)
                drawCirclePattern([centerPos, count, offset, radius])
            elif circOrRect == 2:
                width = randint(0, 100)
                height = randint(0, 100)
                rotation = randint(-180, 180)
                drawRectanglePattern(width, height, centerPos, rotation, offset, count)
    define setRandomColor():
        picks a random color - if statement - randColor = randint(1, 4)
                if randColor == 1:
                    blue
                elif randColor == 2:
                    yellow
                elif randColor == 3:
                    red
                else:
                    green
    define done():
        turtle.hideturtle()
        turtle.done()

Testing
    test it to make sure it works as described in the video
    rename number of rectangles to number of circles in the prompt
    have a default parameter in super pattern of 3
